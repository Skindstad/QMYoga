@page "/Playlist"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using QMYoga.Models
@using QMYoga.Context
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
<link href="PlaylistStyle.css" rel="stylesheet" />

<SearchBar DefaultSelectedTags=@SearchTags/>

<div id="modal-0" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="ModalLabel">Tilføj ny playlist</h1>
                <span class="close" @onclick="(() => CloseModal(0))">&times;</span>
            </div>
            <form>
                <div class="modal-body">
                    <div>
                        <input type="text" class="form-control" placeholder="Navn på playlisten" />
                    </div>
                    <br />
                    <div>
                        <textarea class="form-control" placeholder="Beskrivelse på playlisten"></textarea>
                    </div>
                    <br />
                    <div>
                        <input class="form-control form-control-lg" id="formFileLg" type="file">
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary">Gem</button>
                </div>
            </form>
        </div>
</div>

<button id="myBtn" @onclick="(() => OpenModal(0))">Tilføj ny playlist</button>

@foreach (var playlist in _Playlists)
{
    <div class="split" style="margin-top: 1em;">
        <div class="container">
            <div>
                <p class="section-title">Ny</p>
            </div>
            <div>
                <div id="modal-@playlist.Id" class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="exampleModalLabel">Rediger på playlist</h1>
                            <span class="close" @onclick="(() => CloseModal(playlist.Id))">&times;</span>
                        </div>
                        <form>
                            <div class="modal-body">
                                <div>
                                    <input type="text" class="form-control" placeholder="Navn på playlisten" value="@playlist.Name" />
                                </div>
                                <br />
                                <div>
                                    <textarea class="form-control" placeholder="Beskrivelse på playlisten">@playlist.Description</textarea>
                                </div>
                                <br />
                                <div>
                                    <input class="form-control form-control-lg" id="formFileLg" type="file">
                                </div>

                            </div>
                            <div class="modal-footer">
                                <div class="col">
                                    <button type="button" class="btn btn-primary">Gem</button>
                                </div>
                                <div class="col">
                                    <button type="button" class="btn ">Slet</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <button @onclick="(() => OpenModal(playlist.Id))">Open Modal for Playlist @playlist.Id</button>
            </div>
            <div class="row align-items-center">
                
                <div class="col-6 col-md-4 col-lg-3 position-relative image-overlay-container">
                <a href="videoplayer?playlistid=@playlist.Id">
                    <img src="https://www.ekhartyoga.com/media/image/articles/Laia_Bove_Mermaid-pose.jpg" alt="image" class="img-thumbnail base-image">
                    <img src="https://img.freepik.com/premium-vector/free-vector-padlock-icon-lock-locked_901408-572.jpg" alt="lock" class="img-thumbnail overlay-image">
                </a>
                </div>

                <div class="col">
                    <div class="row">
                        <h1 class="playlist-title">@playlist.Name</h1>
                    </div>
                    <div class="row button-group">
                        @foreach (var tag in playlist.Tags)
                        {
                            <div class="col-6 col-sm-6 col-md-3 mb-2">
                                <button class="btn btn-custom">@tag.Name</button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Collapsible Content (Text + Carousel) -->
            <div class="row" style="@GetDisplayStyle(playlist.IsVisible)">
                <div class="row">
                <div class="col-md-4 col-sm-0"></div>
                <div class="col-md-8 col-sm-12">
                    <p class="description-text">@playlist.Description</p>
                </div>
                </div>
                <div class="row">
                    <div class="col-12 position-relative">
                        <div class="scroll-carousel d-flex" id="carouselContainer@(playlist.Id)">
                            @foreach (var video in playlist.Videos)
                            {
                                <a href="videoplayer?playlistid=@playlist.Id&videoid=@video.Id">
                                    <div class="carousel-image">
                                        <img src="@video.Thumbnail" alt="@video.Title">
                                    </div>
                                </a>
                            }
                        </div>

                        <!-- Carousel Controls -->
                        <button class="carousel-control-prev" type="button" @onclick="() => ScrollCarousel(-1, playlist.Id)">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" @onclick="() => ScrollCarousel(1, playlist.Id)">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Toggle Button -->
            <div class="text-center mt-4">
                <button class="btn btn-toggle" @onclick="() => ToggleContent(playlist.Id)">Show</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "subcategory")]
    public int? SubCategoryId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "tags")]
    public string? SearchTagsString { get; set; }

    private List<Tag> SearchTags {get;set;} = [];

    private bool isContentVisible = false;
    private string toggleButtonText = "Show";

    [Inject]
    public QMYogaContext Context { get; set; }

    public List<Models.Playlist> _Playlists { get; set; }

    private async Task OpenModal(int id)
    {
        string modalId = $"modal-{id}";
        await JSRuntime.InvokeVoidAsync("modalFunctions.openModal", modalId);
        await JSRuntime.InvokeVoidAsync("modalFunctions.setupCloseOnOutsideClick", modalId);
    }

    private async Task CloseModal(int id)
    {
        string modalId = $"modal-{id}";
        await JSRuntime.InvokeVoidAsync("modalFunctions.closeModal", modalId);
    }

    protected override void OnInitialized()
    {
        _Playlists = Context.Playlists
            .Include(x => x.Videos)
            .ThenInclude(x => x.Tags)
            .Include(x => x.SubCategory)
            .ToList();

        foreach (var pl in _Playlists)
        {
            pl.Tags = pl.Videos.SelectMany(x => x.Tags).Distinct().ToList();
        }

        if (SubCategoryId is not null)
        {
            _Playlists = _Playlists
                .Where(x => x.SubCategory.Id == SubCategoryId)
                .ToList();
        }

    }

    private void ToggleContent(int id)
    {
        var playlist = _Playlists.FirstOrDefault(s => s.Id == id);
        if (playlist != null)
        {
            playlist.IsVisible = !playlist.IsVisible;
        }
    }

    private string GetDisplayStyle(bool isVisible)
    {
        return isVisible ? "display: block;" : "display: none;";
    }


    private void ScrollCarousel(int direction, int id)
    {
        JSRuntime.InvokeVoidAsync("scrollCarousel", direction, id);
    }

    protected override void OnParametersSet()
    {
        if (SearchTagsString is not null) {
            SearchTags = SearchTagsString
                .Split("|||")
                .Select(text => new Tag{Name = text})
                .ToList();
        }

        if (SearchTags.Count != 0)
        {
            _Playlists = _Playlists
                .Where(x => SearchTags.All(tag => x.Tags.Any(t => t.Name == tag.Name)))
                .ToList();
        }
    }
}
